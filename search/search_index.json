{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Orivia SDK Documentation","text":"<p>Orivia SDK provides ML-driven ad unit optimization for AppLovin MAX. The SDK dynamically selects the most effective ad unit for each impression based on user context and behavior.</p>"},{"location":"#supported-platforms","title":"\ud83d\udcf1 Supported Platforms","text":"Platform Status Documentation Unity \u2705 Available Unity Integration Android \u2705 Available Android Integration iOS \ud83d\udea7 Coming Soon iOS Integration"},{"location":"#quick-integration","title":"\ud83d\udd27 Quick Integration","text":"Unity (C#)Android (Kotlin) <pre><code>OriviaSdk.Init(\n    publisherId: OriviaPublisherId,\n    defaultBannerAdUnitId: BannerAdUnitId,\n    defaultInterstitialAdUnitId: InterstitialAdUnitId,\n    defaultRewardedAdUnitId: RewardedAdUnitId,\n    dataCollectionOnly: false\n);\n</code></pre> <pre><code>OriviaSdk.getInstance(context).init(\n    OriviaSdk.Config(\n        publisherId = ORIVIA_PUBLISHER_ID,\n        defaultBannerAdUnit = BANNER_AD_UNIT_ID,\n        defaultInterstitialAdUnit = INTERSTITIAL_AD_UNIT_ID,\n        defaultRewardedAdUnit = REWARDED_AD_UNIT_ID,\n        dataCollectionOnly = false\n    )\n)\n</code></pre>"},{"location":"#how-it-works","title":"\ud83d\ude80 How It Works","text":"<ol> <li>Initialize MAX - Set up your AppLovin MAX SDK</li> <li>Initialize Orivia - Add the optimization layer</li> <li>Request Ad Units - Use <code>OriviaMaxHelper</code> to get optimized ad unit IDs</li> <li>Load/Show Ads - Continue using standard MAX methods</li> </ol>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":"<ul> <li>Dynamic Ad Unit Selection - Automatically chooses optimal ad units per user</li> <li>Fallback Support - Uses default ad unit IDs when optimization is unavailable</li> <li>Revenue Tracking - Integrates with MAX revenue callbacks</li> <li>Client Parameters - Support for custom user context data</li> </ul>"},{"location":"#getting-started","title":"\ud83d\udcda Getting Started","text":"<p>Choose your platform and follow the integration guide:</p> <ul> <li>Unity Integration Guide - Complete Unity setup and implementation</li> <li>Android Integration Guide - Android/Kotlin/Java implementation</li> <li>iOS Integration Guide - iOS implementation (coming soon)</li> </ul>"},{"location":"android/","title":"Android Integration","text":"<p>This guide shows you how to integrate the Orivia SDK with AppLovin MAX in Android</p>"},{"location":"android/#import-dependencies","title":"Import Dependencies","text":"<p>Add the Orivia SDK to your project (currently, only manual addition of AAR artifacts is available).</p>"},{"location":"android/#define-sdk-keys-ad-unit-ids","title":"Define SDK Keys &amp; Ad Unit IDs","text":"<p>Declare your MAX SDK key, Orivia publisher ID, and ad unit IDs:</p> KotlinJava <pre><code>private const val MAX_SDK_KEY = \"YOUR_MAX_SDK_KEY\"\nprivate const val ORIVIA_PUBLISHER_ID = \"YOUR_ORIVIA_PUBLISHER_ID\"\n\nprivate const val INTERSTITIAL_AD_UNIT_ID = \"YOUR_INTERSTITIAL_AD_UNIT_ID\"\nprivate const val REWARDED_AD_UNIT_ID = \"YOUR_REWARDED_AD_UNIT_ID\"\nprivate const val BANNER_AD_UNIT_ID = \"YOUR_BANNER_AD_UNIT_ID\"\n</code></pre> <pre><code>private static final String MAX_SDK_KEY = \"YOUR_MAX_SDK_KEY\";\nprivate static final String ORIVIA_PUBLISHER_ID = \"YOUR_ORIVIA_PUBLISHER_ID\";\n\nprivate static final String INTERSTITIAL_AD_UNIT_ID = \"YOUR_INTERSTITIAL_AD_UNIT_ID\";\nprivate static final String REWARDED_AD_UNIT_ID = \"YOUR_REWARDED_AD_UNIT_ID\";\nprivate static final String BANNER_AD_UNIT_ID = \"YOUR_BANNER_AD_UNIT_ID\";\n</code></pre>"},{"location":"android/#initialize-max-orivia","title":"Initialize MAX &amp; Orivia","text":"<p>Init MAX:</p> KotlinJava <pre><code>val initConfig = AppLovinSdkInitializationConfiguration.builder(MAX_SDK_KEY)\n    .setMediationProvider(AppLovinMediationProvider.MAX)\n    .build()\n\nAppLovinSdk.getInstance(context).initialize(initConfig) {\n    // MAX SDK initialized\n}\n</code></pre> <pre><code>AppLovinSdkInitializationConfiguration initConfig = AppLovinSdkInitializationConfiguration.builder(MAX_SDK_KEY)\n    .setMediationProvider(AppLovinMediationProvider.MAX)\n    .build();\n\nAppLovinSdk.getInstance(context).initialize(initConfig, config -&gt; {\n    // MAX SDK initialized\n});\n</code></pre> <p>Init Orivia (any time after MAX init, but before requesting ads):</p> KotlinJava <pre><code>OriviaSdk.getInstance(context).init(\n    OriviaSdk.Config(\n        publisherId = ORIVIA_PUBLISHER_ID,\n        defaultBannerAdUnit = BANNER_AD_UNIT_ID,\n        defaultInterstitialAdUnit = INTERSTITIAL_AD_UNIT_ID,\n        defaultRewardedAdUnit = REWARDED_AD_UNIT_ID,\n        dataCollectionOnly = false // optional, false by default\n    ),\n    initListener = object : OriviaSdk.InitListener {\n        override fun onInitCompleted() {\n            Log.d(\"OriviaSDK\", \"Orivia SDK initialized.\")\n        }\n\n        override fun onInitFailed(exception: OriviaException) {\n            Log.e(\"OriviaSDK\", \"Orivia init failed: ${exception.reason}\")\n        }\n    }\n)\n</code></pre> <pre><code>OriviaSdk.getInstance(context).init(\n    new OriviaSdk.Config(\n        ORIVIA_PUBLISHER_ID,\n        BANNER_AD_UNIT_ID,\n        INTERSTITIAL_AD_UNIT_ID,\n        REWARDED_AD_UNIT_ID,\n        false // dataCollectionOnly\n    ),\n    new OriviaSdk.InitListener() {\n        @Override\n        public void onInitCompleted() {\n            Log.d(\"OriviaSDK\", \"Orivia SDK initialized.\");\n        }\n\n        @Override\n        public void onInitFailed(@NonNull OriviaException exception) {\n            Log.e(\"OriviaSDK\", \"Orivia init failed: \" + exception.getReason());\n        }\n    }\n);\n</code></pre> <p>Info</p> <p>Orivia is ready immediately after calling <code>init</code>. You can load or show ads right away. If no config is loaded, default IDs are used.</p> <p>Important</p> <p><code>onInitCompleted()</code> is triggered after the SDK loads its first config from the server. To ensure optimal ads performance, it's highly recommended to wait for this callback before starting to load any ads.</p> <p>Important</p> <p>Calling <code>init</code> multiple times does not reinitialize the SDK if it's already initialized or currently initializing. The method will only run again if the SDK has previously invoked the <code>onInitFailed</code> callback. If <code>init</code> is called after the SDK has been initialized, <code>onInitCompleted()</code> is invoked immediately for provided listener. If <code>init</code> is called while initialization is in progress, the newly provided listener will be notified as soon as initialization finishes, together with all previous listeners.</p> <p>If a certain ad type isn't used, just pass the constant <code>OriviaSdk.AD_UNIT_ID_EMPTY</code> instead of ad unit id.</p> <p>For example, if the application doesn't have a key for a banner:</p> KotlinJava <pre><code>OriviaSdk.getInstance(context).init(\n    OriviaSdk.Config(\n        publisherId = ORIVIA_PUBLISHER_ID,\n        defaultBannerAdUnit = OriviaSdk.AD_UNIT_ID_EMPTY,\n        defaultInterstitialAdUnit = INTERSTITIAL_AD_UNIT_ID,\n        defaultRewardedAdUnit = REWARDED_AD_UNIT_ID,\n        dataCollectionOnly = false\n    )\n)\n</code></pre> <pre><code>OriviaSdk.getInstance(context).init(\n    new OriviaSdk.Config(\n        ORIVIA_PUBLISHER_ID,\n        OriviaSdk.AD_UNIT_ID_EMPTY,\n        INTERSTITIAL_AD_UNIT_ID,\n        REWARDED_AD_UNIT_ID,\n        false\n    )\n);\n</code></pre>"},{"location":"android/#store-ad-results","title":"Store Ad Results","text":"<p>Create a single <code>OriviaMaxHelper</code> instance at class level:</p> KotlinJava <pre><code>private val oriviaMaxHelper: OriviaMaxHelper by lazy {\n    OriviaMaxHelper(context)\n}\n</code></pre> <pre><code>private OriviaMaxHelper oriviaMaxHelper = new OriviaMaxHelper(context);\n</code></pre> <p>This helper will remember the last success/failure per ad type and feed it to Orivia SDK.</p>"},{"location":"android/#interstitial","title":"Interstitial","text":""},{"location":"android/#hook-into-max-interstitial-callbacks","title":"Hook Into MAX Interstitial Callbacks","text":"<p>Forward to the helper related events:</p> KotlinJava <pre><code>private fun setupInterstitialCallbacks(interstitialAd: MaxInterstitialAd) {\n    interstitialAd.setListener(object : MaxAdListener {\n        override fun onAdLoaded(maxAd: MaxAd) {\n            oriviaMaxHelper.onAdLoaded(maxAd)\n            // Handle your own interstitial loaded logic\n        }\n\n        override fun onAdLoadFailed(adUnitId: String, error: MaxError) {\n            oriviaMaxHelper.onAdLoadFailed(AdType.INTERSTITIAL, adUnitId)\n            // Handle your own interstitial failed logic\n        }\n\n        override fun onAdDisplayed(maxAd: MaxAd) {\n            // Handle interstitial displayed\n        }\n\n        override fun onAdHidden(maxAd: MaxAd) {\n            // Handle interstitial hidden\n        }\n\n        override fun onAdClicked(maxAd: MaxAd) {\n            // Handle interstitial clicked\n        }\n\n        override fun onAdDisplayFailed(maxAd: MaxAd, error: MaxError) {\n            // Handle interstitial display failed\n        }\n    })\n\n    interstitialAd.setRevenueListener { maxAd -&gt;\n        oriviaMaxHelper.onAdRevenuePaid(maxAd)\n    }\n}\n</code></pre> <pre><code>private void setupInterstitialCallbacks(MaxInterstitialAd interstitialAd) {\n    interstitialAd.setListener(new MaxAdListener() {\n        @Override\n        public void onAdLoaded(MaxAd maxAd) {\n            oriviaMaxHelper.onAdLoaded(maxAd);\n            // Handle your own interstitial loaded logic\n        }\n\n        @Override\n        public void onAdLoadFailed(String adUnitId, MaxError error) {\n            oriviaMaxHelper.onAdLoadFailed(AdType.INTERSTITIAL, adUnitId);\n            // Handle your own interstitial failed logic\n        }\n\n        @Override\n        public void onAdDisplayed(MaxAd maxAd) {\n            // Handle interstitial displayed\n        }\n\n        @Override\n        public void onAdHidden(MaxAd maxAd) {\n            // Handle interstitial hidden\n        }\n\n        @Override\n        public void onAdClicked(MaxAd maxAd) {\n            // Handle interstitial clicked\n        }\n\n        @Override\n        public void onAdDisplayFailed(MaxAd maxAd, MaxError error) {\n            // Handle interstitial display failed\n        }\n    });\n\n    interstitialAd.setRevenueListener(maxAd -&gt; oriviaMaxHelper.onAdRevenuePaid(maxAd));\n}\n</code></pre> <p>Important</p> <p>You should call these callbacks in the same place in your code where you handle your own callbacks or MMP callbacks.</p> <p>It's critical for the SDK to receive all events.</p>"},{"location":"android/#load-show-interstitial","title":"Load &amp; Show Interstitial","text":"<p>Use <code>OriviaMaxHelper</code> instance to pick the ad unit id, then call MAX:</p> KotlinJava <pre><code>private fun loadInterstitial() {\n    val adUnitId = oriviaMaxHelper.getAdUnitId(AdType.INTERSTITIAL)\n    val interstitialAd = MaxInterstitialAd(adUnitId)\n\n    // Disable MAX's auto-retry via extra parameter\n    interstitialAd.setExtraParameter(\"disable_auto_retries\", \"true\")\n\n    setupInterstitialCallbacks(interstitialAd)\n    interstitialAd.loadAd()\n}\n\nprivate fun showInterstitial() {\n    if (interstitialAd?.isReady == true) {\n        interstitialAd.showAd(activity)\n    }\n}\n</code></pre> <pre><code>private void loadInterstitial() {\n    String adUnitId = oriviaMaxHelper.getAdUnitId(AdType.INTERSTITIAL);\n    MaxInterstitialAd interstitialAd = new MaxInterstitialAd(adUnitId);\n\n    // Disable MAX's auto-retry via extra parameter\n    interstitialAd.setExtraParameter(\"disable_auto_retries\", \"true\");\n\n    setupInterstitialCallbacks(interstitialAd);\n    interstitialAd.loadAd();\n}\n\nprivate void showInterstitial() {\n    if (interstitialAd != null &amp;&amp; interstitialAd.isReady()) {\n        interstitialAd.showAd(activity);\n    }\n}\n</code></pre> <p>Important</p> <p><code>getAdUnitId</code> should NOT be used when <code>dataCollectionOnly</code> is <code>true</code>, as the SDK does not update ad units in this mode \u2014 it will only return the values returned from init configuration call.</p>"},{"location":"android/#rewarded","title":"Rewarded","text":""},{"location":"android/#hook-into-max-rewarded-callbacks","title":"Hook Into MAX Rewarded Callbacks","text":"<p>Forward to the helper related events:</p> KotlinJava <pre><code>private fun setupRewardedCallbacks(rewardedAd: MaxRewardedAd) {\n    rewardedAd.setListener(object : MaxRewardedAdListener {\n        override fun onAdLoaded(maxAd: MaxAd) {\n            oriviaMaxHelper.onAdLoaded(maxAd)\n            // Handle your own rewarded loaded logic\n        }\n\n        override fun onAdLoadFailed(adUnitId: String, error: MaxError) {\n            oriviaMaxHelper.onAdLoadFailed(AdType.REWARDED, adUnitId)\n            // Handle your own rewarded failed logic\n        }\n\n        override fun onAdDisplayed(maxAd: MaxAd) {\n            // Handle rewarded displayed\n        }\n\n        override fun onAdHidden(maxAd: MaxAd) {\n            // Handle rewarded hidden\n        }\n\n        override fun onAdClicked(maxAd: MaxAd) {\n            // Handle rewarded clicked\n        }\n\n        override fun onAdDisplayFailed(maxAd: MaxAd, error: MaxError) {\n            // Handle rewarded display failed\n        }\n\n        override fun onUserRewarded(maxAd: MaxAd, maxReward: MaxReward) {\n            // Handle user rewarded\n        }\n    })\n\n    rewardedAd.setRevenueListener { maxAd -&gt;\n        oriviaMaxHelper.onAdRevenuePaid(maxAd)\n    }\n}\n</code></pre> <pre><code>private void setupRewardedCallbacks(MaxRewardedAd rewardedAd) {\n    rewardedAd.setListener(new MaxRewardedAdListener() {\n        @Override\n        public void onAdLoaded(MaxAd maxAd) {\n            oriviaMaxHelper.onAdLoaded(maxAd);\n            // Handle your own rewarded loaded logic\n        }\n\n        @Override\n        public void onAdLoadFailed(String adUnitId, MaxError error) {\n            oriviaMaxHelper.onAdLoadFailed(AdType.REWARDED, adUnitId);\n            // Handle your own rewarded failed logic\n        }\n\n        @Override\n        public void onAdDisplayed(MaxAd maxAd) {\n            // Handle rewarded displayed\n        }\n\n        @Override\n        public void onAdHidden(MaxAd maxAd) {\n            // Handle rewarded hidden\n        }\n\n        @Override\n        public void onAdClicked(MaxAd maxAd) {\n            // Handle rewarded clicked\n        }\n\n        @Override\n        public void onAdDisplayFailed(MaxAd maxAd, MaxError error) {\n            // Handle rewarded display failed\n        }\n\n        @Override\n        public void onUserRewarded(MaxAd maxAd, MaxReward maxReward) {\n            // Handle user rewarded\n        }\n    });\n\n    rewardedAd.setRevenueListener(maxAd -&gt; oriviaMaxHelper.onAdRevenuePaid(maxAd));\n}\n</code></pre> <p>Important</p> <p>You should call these callbacks in the same place in your code where you handle your own callbacks or MMP callbacks.</p> <p>It's critical for the SDK to receive all events.</p>"},{"location":"android/#load-show-rewarded","title":"Load &amp; Show Rewarded","text":"<p>Use <code>OriviaMaxHelper</code> instance to pick the ad unit id, then call MAX:</p> KotlinJava <pre><code>private fun loadRewarded() {\n    val adUnitId = oriviaMaxHelper.getAdUnitId(AdType.REWARDED)\n    val rewardedAd = MaxRewardedAd.getInstance(adUnitId)\n\n    // Disable MAX's auto-retry via extra parameter\n    rewardedAd.setExtraParameter(\"disable_auto_retries\", \"true\")\n\n    setupRewardedCallbacks(rewardedAd)\n    rewardedAd.loadAd()\n}\n\nprivate fun showRewarded() {\n    if (rewardedAd?.isReady == true) {\n        rewardedAd.showAd(activity)\n    }\n}\n</code></pre> <pre><code>private void loadRewarded() {\n    String adUnitId = oriviaMaxHelper.getAdUnitId(AdType.REWARDED);\n    MaxRewardedAd rewardedAd = MaxRewardedAd.getInstance(adUnitId);\n\n    // Disable MAX's auto-retry via extra parameter\n    rewardedAd.setExtraParameter(\"disable_auto_retries\", \"true\");\n\n    setupRewardedCallbacks(rewardedAd);\n    rewardedAd.loadAd();\n}\n\nprivate void showRewarded() {\n    if (rewardedAd != null &amp;&amp; rewardedAd.isReady()) {\n        rewardedAd.showAd(activity);\n    }\n}\n</code></pre> <p>Important</p> <p><code>getAdUnitId</code> should NOT be used when <code>dataCollectionOnly</code> is <code>true</code>, as the SDK does not update ad units in this mode \u2014 it will only return the values returned from init configuration call.</p>"},{"location":"android/#client-parameters","title":"Client Parameters","text":"<p>To pass client parameters to the server:</p> KotlinJava <pre><code>OriviaSdk.getInstance(context).setClientParams(\n    valueMap {\n        put(\"str\", \"value\")\n        put(\"int\", 12)\n        put(\"float\", 1.3f)\n        put(\"bool\", true)\n        put(\"nested\", valueMap {\n            put(\"str\", \"value\")\n        })\n    }\n)\n</code></pre> <pre><code>OriviaSdk.getInstance(context).setClientParams(\n    new ValueMap.Builder()\n        .put(\"str\", \"value\")\n        .put(\"int\", 12)\n        .put(\"float\", 1.3f)\n        .put(\"bool\", true)\n        .put(\"nested\", new ValueMap.Builder()\n            .put(\"str\", \"value\")\n            .build()\n        ).build()\n);\n</code></pre> <p>If the parameters should be passed in the init request, the <code>setClientParams</code> method must be called before invoking the <code>init</code> method.</p> <p>Important</p> <p>Passing <code>null</code> to this method has no effect. To clear the parameters, pass an empty <code>ValueMap</code>.</p>"},{"location":"android/#logging","title":"Logging","text":"<p>Turn on internal logs for debugging:</p> KotlinJava <pre><code>OriviaSdk.getInstance(context).setLoggingEnabled(true)\n</code></pre> <pre><code>OriviaSdk.getInstance(context).setLoggingEnabled(true);\n</code></pre>"},{"location":"android/#privacy","title":"Privacy","text":"<p>To pass GDPR Applies there are 2 options.</p> <p>Pass it through CMP IABTCF_gdprApplies property or using SDK method:</p> KotlinJava <pre><code>OriviaSdk.getInstance(context).setGdprApplies(true) // or false, or null for unknown\n</code></pre> <pre><code>OriviaSdk.getInstance(context).setGdprApplies(true); // or false, or null for unknown\n</code></pre> <p>To pass COPPA:</p> KotlinJava <pre><code>OriviaSdk.getInstance(context).setCoppa(true) // or false, or null for unknown\n</code></pre> <pre><code>OriviaSdk.getInstance(context).setCoppa(true); // or false, or null for unknown\n</code></pre> <p>Null values reset properties.</p>"},{"location":"ios/","title":"iOS Integration","text":"<p>Coming soon</p>"},{"location":"unity/","title":"Unity Integration","text":"<p>This guide shows you how to integrate the Orivia SDK with AppLovin MAX in Unity</p>"},{"location":"unity/#import-package","title":"Import Package","text":"<p>Make sure the Orivia SDK namespace is available in your scripts:</p> <pre><code>using Orivia.Monetization;\n</code></pre>"},{"location":"unity/#define-sdk-keys-ad-unit-ids","title":"Define SDK Keys &amp; Ad Unit IDs","text":"<p>Declare your MAX SDK key, Orivia publisher ID, and ad unit IDs:</p> <pre><code>private const string MaxSdkKey = \"YOUR_MAX_SDK_KEY\";\nprivate const string OriviaPublisherId = \"YOUR_ORIVIA_PUBLISHER_ID\";\n\n#if UNITY_IOS\n    private const string InterstitialAdUnitId = \"IOS_INTERSTITIAL_ID\";\n    private const string RewardedAdUnitId = \"IOS_REWARDED_ID\";\n    private const string BannerAdUnitId = \"IOS_BANNER_ID\";\n#else\n    private const string InterstitialAdUnitId = \"ANDROID_INTERSTITIAL_ID\";\n    private const string RewardedAdUnitId = \"ANDROID_REWARDED_ID\";\n    private const string BannerAdUnitId = \"ANDROID_BANNER_ID\";\n#endif\n</code></pre>"},{"location":"unity/#initialize-max-orivia","title":"Initialize MAX &amp; Orivia","text":"<p>Init MAX:</p> <pre><code>MaxSdk.SetSdkKey(MaxSdkKey);\nMaxSdk.InitializeSdk();\n</code></pre> <p>Init Orivia: (any time after MAX init, but before requesting ads):</p> <pre><code>OriviaSdk.Init(\n    publisherId: OriviaPublisherId,\n    defaultBannerAdUnitId: BannerAdUnitId,\n    defaultInterstitialAdUnitId: InterstitialAdUnitId,\n    defaultRewardedAdUnitId: RewardedAdUnitId,\n    dataCollectionOnly: false // optional, false by default\n    initListener: new SimpleInitListener() // optional\n);\n\n// ...\n\ninternal class SimpleInitListener : IInitListener\n{\n    public void OnInitCompleted() =&gt; Debug.Log(\"Orivia SDK initialized.\");\n\n    public void OnInitFailed(OriviaException ex) =&gt; Debug.LogError($\"Orivia init failed: {ex.ErrorReason} \u2014 {ex.Message}\");\n}\n</code></pre> <p>Info</p> <p>Orivia is ready immediately after calling <code>Init</code>. You can load or show ads right away. If no config is loaded, default adUnits are used.</p> <p>Important</p> <p><code>OnInitCompleted()</code> is triggered after the SDK loads its first config from the server. To ensure optimal ads performance, it's highly recommended to wait for this callback before starting to load any ads.</p> <p>Important</p> <p>Calling <code>Init</code> multiple times does not reinitialize the SDK if it's already initialized or currently initializing. The method will only run again if the SDK has previously invoked the <code>OnInitFailed</code> callback.</p> <p>If <code>Init</code> is called after the SDK has been initialized, <code>OnInitCompleted()</code> is invoked immediately for provided listener. If <code>Init</code> is called while initialization is in progress, the newly provided listener will be notified as soon as initialization finishes, together with all previous listeners.</p> <p>If a certain ad type isn't used, just pass the constant <code>OriviaSdk.AdUnitIdEmpty</code> instead of ad unit id.</p> <p>For example, if the application doesn't have a key for a banner:</p> <pre><code>OriviaSdk.Init(\n    publisherId: OriviaPublisherId,\n    defaultBannerAdUnitId: OriviaSdk.AdUnitIdEmpty,\n    defaultInterstitialAdUnitId: InterstitialAdUnitId,\n    defaultRewardedAdUnitId: RewardedAdUnitId,\n    dataCollectionOnly: false // optional, false by default\n    initListener: new SimpleInitListener() // optional\n);\n</code></pre>"},{"location":"unity/#store-ad-results","title":"Store Ad Results","text":"<p>Create a single <code>OriviaMaxHelper</code> instance at class level:</p> <pre><code>private OriviaMaxHelper _oriviaMaxHelper = new OriviaMaxHelper();\n</code></pre> <p>This helper will remember the last success/failure per ad type and feed it to Orivia SDK.</p>"},{"location":"unity/#interstitial","title":"Interstitial","text":""},{"location":"unity/#hook-into-max-interstitial-callbacks","title":"Hook Into MAX Interstitial Callbacks","text":"<p>Forward to the helper related events:</p> <pre><code>private void InitializeInterstitialAds()\n{\n    MaxSdkCallbacks.Interstitial.OnAdLoadedEvent += OnInterstitialLoadedEvent;\n    MaxSdkCallbacks.Interstitial.OnAdLoadFailedEvent += OnInterstitialFailedEvent;\n    MaxSdkCallbacks.Interstitial.OnAdRevenuePaidEvent += OnInterstitialRevenuePaidEvent;\n}\n\n// ...\n\nprivate void OnInterstitialLoadedEvent(string adUnitId, MaxSdkBase.AdInfo adInfo)\n{\n    _oriviaMaxHelper.OnAdLoaded(adInfo);\n    // ...\n}\n\nprivate void OnInterstitialFailedEvent(string adUnitId, MaxSdkBase.ErrorInfo errorInfo)\n{\n    _oriviaMaxHelper.OnAdLoadFailed(AdType.Interstitial, adUnitId);\n    // ...\n}\n\nprivate void OnInterstitialRevenuePaidEvent(string adUnitId, MaxSdkBase.AdInfo adInfo)\n{\n    _oriviaMaxHelper.OnAdRevenuePaid(adInfo);\n}\n</code></pre> <p>Important</p> <p>You should call these callbacks in the same place in your code where you handle your own callbacks or MMP callbacks.</p> <p>It's critical for the SDK to receive all events.</p>"},{"location":"unity/#load-show-interstitial","title":"Load &amp; Show Interstitial","text":"<p>Use <code>OriviaMaxHelper</code> instance to pick the ad unit id, then call MAX:</p> <pre><code>void LoadInterstitial()\n{\n    // store returned ad unit id for later call show method \n    _currentInterstitialAdUnitId = _oriviaMaxHelper.GetAdUnitId(AdType.Interstitial);\n    // disable MAX's auto-retry via extra parameter\n    MaxSdk.SetInterstitialExtraParameter(_currentInterstitialAdUnitId, \"disable_auto_retries\", \"true\");\n    MaxSdk.LoadInterstitial(_currentInterstitialAdUnitId);\n}\n\nvoid ShowInterstitial()\n{\n    if (_currentInterstitialAdUnitId != null &amp;&amp; MaxSdk.IsInterstitialReady(_currentInterstitialAdUnitId))\n    {\n        MaxSdk.ShowInterstitial(_currentInterstitialAdUnitId);\n    }\n}\n</code></pre> <p>Important</p> <p><code>GetAdUnitId</code> should NOT be used when <code>dataCollectionOnly</code> is <code>true</code>, as the SDK does not update ad units in this mode \u2014 it will only return the values returned from init configuration call.</p>"},{"location":"unity/#rewarded","title":"Rewarded","text":""},{"location":"unity/#hook-into-max-rewarded-callbacks","title":"Hook Into MAX Rewarded Callbacks","text":"<p>Forward to the helper related events:</p> <pre><code>private void InitializeRewardedAds()\n{\n    MaxSdkCallbacks.Rewarded.OnAdLoadedEvent += OnRewardedAdLoadedEvent;\n    MaxSdkCallbacks.Rewarded.OnAdLoadFailedEvent += OnRewardedAdFailedEvent;\n    MaxSdkCallbacks.Rewarded.OnAdRevenuePaidEvent += OnRewardedAdRevenuePaidEvent;\n}\n\n// ...\n\nprivate void OnRewardedAdLoadedEvent(string adUnitId, MaxSdkBase.AdInfo adInfo)\n{\n    _oriviaMaxHelper.OnAdLoaded(adInfo);\n    // ...\n}\n\nprivate void OnRewardedAdFailedEvent(string adUnitId, MaxSdkBase.ErrorInfo errorInfo)\n{\n    _oriviaMaxHelper.OnAdLoadFailed(AdType.Rewarded, adUnitId);\n    // ...\n}\n\nprivate void OnRewardedAdRevenuePaidEvent(string adUnitId, MaxSdkBase.AdInfo adInfo)\n{\n    _oriviaMaxHelper.OnAdRevenuePaid(adInfo);\n}\n</code></pre> <p>Important</p> <p>You should call these callbacks in the same place in your code where you handle your own callbacks or MMP callbacks.</p> <p>It's critical for the SDK to receive all events.</p>"},{"location":"unity/#load-show-rewarded","title":"Load &amp; Show Rewarded","text":"<p>Use <code>OriviaMaxHelper</code> instance to pick the ad unit id, then call MAX:</p> <pre><code>void LoadRewardedAd()\n{\n    // store returned ad unit id for later call show method \n    _currentRewardedAdUnitId = _oriviaMaxHelper.GetAdUnitId(AdType.Rewarded);\n    // disable MAX's auto-retry via extra parameter\n    MaxSdk.SetRewardedAdExtraParameter(_currentRewardedAdUnitId, \"disable_auto_retries\", \"true\");\n    MaxSdk.LoadRewardedAd(_currentInterstitialAdUnitId);\n}\n\nvoid ShowRewardedAd()\n{\n    if (_currentRewardedAdUnitId != null &amp;&amp; MaxSdk.IsRewardedAdReady(_currentRewardedAdUnitId))\n    {\n        MaxSdk.ShowRewardedAd(_currentRewardedAdUnitId);\n    }\n}\n</code></pre> <p>Important</p> <p><code>GetAdUnitId</code> should NOT be used when <code>dataCollectionOnly</code> is <code>true</code>, as the SDK does not update ad units in this mode \u2014 it will only return the values returned from init configuration call.</p>"},{"location":"unity/#client-parameters","title":"Client Parameters","text":"<p>To pass client parameters to the server:</p> <pre><code>var nested = new ValueMap.Builder().Put(\"nested\", \"value\").Build();\nvar clientParams = new ValueMap.Builder()\n    .Put(\"str\", \"value\")\n    .Put(\"int\", UnityEngine.Random.Range(1, 1000))\n    .Put(\"float\", 3.43)\n    .Put(\"bool\", true)\n    .Put(\"nested\", nested)\n    .Build();\nOriviaSdk.SetClientParams(clientParams);\n</code></pre> <p>If the parameters should be passed in the init request, the <code>SetClientParams</code> method must be called before invoking the <code>Init</code> method.</p> <p>Important</p> <p>Passing <code>null</code> to this method has no effect. To clear the parameters, pass an empty <code>ValueMap</code>.</p>"},{"location":"unity/#logging","title":"Logging","text":"<p>Turn on internal logs for debugging:</p> <pre><code>OriviaSdk.SetLoggingEnabled(boolean);\n</code></pre>"},{"location":"unity/#privacy","title":"Privacy","text":"<p>To pass GDPR Applies there are 2 options.</p> <p>Pass it through CMP IABTCF_gdprApplies property or using SDK method:</p> <pre><code>OriviaSdk.SetGdprApplies(boolean?)\n</code></pre> <p>To pass COPPA:</p> <pre><code>OriviaSdk.SetCoppa(boolean?)\n</code></pre> <p>Null values reset properties.</p>"}]}